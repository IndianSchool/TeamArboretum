===========================================================================================================================================
WordCount Program For Multiple Input files
===========================================================================================================================================
Jar File Name : WordCount.jar
Purpose       : To find the word count across multiple files
Logic Used    : Place all the input files in a single folder and run the WordCount.jar program by passing the input folder path
Input Format  : We have four input files as listed below
                  1. wordcount.txt      --  Entire war and peace novel in text format
                  2. wordcount_01.txt   --  dinesh, sathish, arjun
                                            vasanth, sathish, arjun
                                            seenu, raja, ramesh
                                            eshwar, dinesh
                  3. wordcount_02.txt   --  Hai, Tom, How are you ?
                                            Atom is a fine lowest level unit.
                                            Optometrics.
                                            He is the regular customer to BRAND FACTORY.
                  4. wordcount_03.txt   --  Hai, Tom, How are you ?
                                            Atom is a fine lowest level unit. tom,
                                            Optometrics.
                                            He is the regular customer to BRAND FACTORY.
                                            tom, Tom, tOm, toM, TOm, tOM, ToM, TOM
Expected Output : One file with all the words sorted by  + no of occurences
                  1. part-r-00000       --  zois,	1
                                            zone	1
                                            zoology	1
===========================================================================================================================================
Steps to run  : 1. Place all your input files into one HDFS folder as below.
                    /HandsOn/input/wordcount.txt
                    /HandsOn/input/wordcount_01.txt
                    /HandsOn/input/wordcount_02.txt
                    /HandsOn/input/wordcount_03.txt
                2. Create jar file using WordCount.java program
                     Command Create jar file :  jar cvf <java file path> <jar file path>
                                                jar cvf ./Java_files/WordCount.java ./Jar_files/WordCount.jar
                3. Then run this program using the below command :
                      hadoop jar <jar file name> <Class name> <input folder path> <output folder path>
                      hadoop jar ./Jar_files/WordCount.jar WordCount /HandsOn/input /HandsOn/output/wc-multifile-in
===========================================================================================================================================
Pseudocode : ( taking only wordcount_01.txt for example ) 
============
As we have multiple input files, each input file will be considered as separate input split. 
Here in this case, we have total of 4 input files. So 4 input splits will be created and each will be assigned to separate mappers.
Hence we have 4 mappers in this case. Refer Output log, you can see number of splits used by mapreduce in this program. 

Input file(wordcount_01.txt) --Each line in a file will be sent to Mapper as key value pair -- <Key = Byte Offest, value = Line>

    Mapper Input :  	<1>,<dinesh, sathish, arjun>
<LongWritable>,<Text>   <22>,<vasanth, sathish, arjun>
                    	<48>,<seenu, raja, ramesh>
                    	<67>,<eshwar, dinesh>
 
 Mapper splits the entire line into separate words and make it as Key and assign one as value
     
     Mapper Output: 	<dinesh>, <1>
<Text>,<IntWritable>    <sathish>, <1>
                    	<arjun>, <1>
	        	<vasanth>, <1>
        	        <sathish>, <1>
                    	<arjun>, <1>
                    	<seenu>, <1>
                    	<raja>, <1>
                    	<ramesh>, <1>
                    	<eshwar>, <1>
                    	<dinesh>, <1>
 Sort and shuffle combines the above output based on key values. In this case, it groups based on the words. 
 As we have mappers invoked in this program, we would have 4 sort and shuffle phases one for each mapper. 
    
    Sort and Shuffle Output :  <arjun>,<2>
 <Text>,<IntWritable>          <dinesh>,<2>
                               <eshwar>,<1>
                               <raja>,<1>
                               <ramesh>,<1>
                               <sathish>,<2>
                               <seenu>,<1>
                               <vasnath>,<1>
 
 Then reducer aggregates all the data which coming from different sort and shuffle phases, here we have only one reducer used.
  
              Reducer Output : <arjun>,<2>
   <Text>,<IntWritable>        <dinesh>,<2>
                               <eshwar>,<1>
                               <raja>,<1>
                               <ramesh>,<1>
                               <sathish>,<2>
                               <seenu>,<1>
                               <vasnath>,<1>

===========================================================================================================================================
Output log :
============


